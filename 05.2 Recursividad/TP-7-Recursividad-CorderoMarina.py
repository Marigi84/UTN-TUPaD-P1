'''#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa 
#funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros 
#entre 1 y el n√∫mero que indique el usuario''' 

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

numero = int(input("Ingrese un n√∫mero entero: "))

for i in range(1, numero+1):
    print(f"El factorial de {i} es {factorial(i)}")



'''#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n 
#indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.'''

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n-1) + fibonacci(n-2)

numero = int(input("Ingrese un n√∫mero entero: "))

for i in range(0, numero+1):
    print(f"La posici√≥n {i} de la serie de Fibonacci es {fibonacci(i)}")


'''#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un 
#exponente, utilizando la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general. '''

def potencia(n, m):
    # Caso base: cualquier n√∫mero elevado a 0 es 1
    if m == 0:
        return 1
    else:
        # Paso recursivo
        return n * potencia(n, m - 1)

# Algoritmo general de prueba
def prueba_potencia():
    # Pedimos al usuario la base y el exponente
    base = int(input("Ingrese la base: "))
    exponente = int(input("Ingrese el exponente: "))
    
    # Calculamos la potencia usando la funci√≥n recursiva
    resultado = potencia(base, exponente)
    
    # Mostramos el resultado
    print(f"{base} elevado a la {exponente} es: {resultado}")

# Llamamos al algoritmo de prueba
prueba_potencia()


'''#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base 
#decimal y devuelva su representaci√≥n en binario como una cadena de texto. '''

# Definimos una funci√≥n llamada decimal_a_binario que convierte un n√∫mero decimal a binario de forma recursiva
def decimal_a_binario(n):
    # Caso base: si n es 0, retorna una cadena vac√≠a
    if n == 0:
        return ""
    else:
        # Llamada recursiva: divide n por 2 (divisi√≥n entera) y concatena el resto (n % 2) convertido a cadena
        return decimal_a_binario(n // 2) + str(n % 2)

# Solicitamos al usuario que ingrese un n√∫mero entero positivo
numero = int(input("Ingrese un n√∫mero entero positivo: "))

# Validamos que el n√∫mero ingresado sea positivo
if numero < 0:
    print("Por favor, ingrese un n√∫mero entero positivo.")
else:
    # Si el n√∫mero es v√°lido, mostramos el n√∫mero convertido a binario usando la funci√≥n decimal_a_binario
    print(f"El n√∫mero {numero} en binario es: {decimal_a_binario(numero)}")


    

'''5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una 
cadena de texto sin espacios ni tildes, y devuelva True si es un pal√≠ndromo o False si no 
lo es. 
     Requisitos: 
La soluci√≥n debe ser recursiva. 
No se debe usar [::-1] ni la funci√≥n reversed().'''

def es_palindromo(palabra, inicio=0, fin=None):
    # Si es la primera llamada, inicializamos 'fin' con el √∫ltimo √≠ndice
    if fin is None:
        fin = len(palabra) - 1

    # Caso base: si ya cruzamos los √≠ndices, es pal√≠ndromo
    if inicio >= fin:
        return True

    # Si los caracteres no coinciden, no es pal√≠ndromo
    if palabra[inicio] != palabra[fin]:
        return False

    # Llamada recursiva, avanzando los √≠ndices hacia el centro
    return es_palindromo(palabra, inicio + 1, fin - 1)

palabra = input("Ingrese una palabra: ")
if es_palindromo(palabra):
    print(f"'{palabra}' es un pal√≠ndromo.")
else:
    print(f"'{palabra}' no es un pal√≠ndromo.")


'''6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un 
n√∫mero entero positivo y devuelva la suma de todos sus d√≠gitos. 
     Restricciones: 
No se puede convertir el n√∫mero a string. 
Us√° operaciones matem√°ticas (%, //) y recursi√≥n. 
Ejemplos: 
suma_digitos(1234)   ‚Üí 10  (1 + 2 + 3 + 4) 
suma_digitos(9)      ‚Üí 9 
suma_digitos(305)    ‚Üí 8   (3 + 0 + 5) '''

def suma_digitos(n):
    # Caso base: si el n√∫mero es menor que 
    if n <= 1:
        return 1
    else:
        ultimo_digito = n % 10
        resto = n//10
        resultado = ultimo_digito + suma_digitos(resto)
        return resultado

numero = int(input("Ingrese un n√∫mero entero positivo: "))
resultado = suma_digitos(numero)
print(f"La suma de los d√≠gitos de {numero} es: {resultado}")



'''Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n 
bloques, en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al 
√∫ltimo nivel con un solo bloque. 
 
Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el 
nivel m√°s bajo y devuelva el total de bloques que necesita para construir toda la 
pir√°mide. 
 
      Ejemplos: 
contar_bloques(1)   ‚Üí 1         (1) 
contar_bloques(2)   ‚Üí 3         (2 + 1) 
contar_bloques(4)   ‚Üí 10        (4 + 3 + 2 + 1)'''

def contar_bloques(n):
    if n == 1:
        return 1
    else:
        return n + contar_bloques(n-1)

numero = int(input("Ingrese un n√∫mero entero positivo: "))




'''8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un 
n√∫mero entero positivo (numero) y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces 
aparece ese d√≠gito dentro del n√∫mero. 
      Ejemplos: 
contar_digito(12233421, 2)   ‚Üí 3   
contar_digito(5555, 5)       ‚Üí 4
contar_digito(123456, 7)     ‚Üí 0  '''

def contar_digito(numero, digito):
    # Caso base: si el n√∫mero ya es 0, no hay m√°s d√≠gitos
    if numero == 0:
        return 0
    else:
        # Obtenemos el √∫ltimo d√≠gito
        ultimo_digito = numero % 10
        
        # Comparamos si es igual al d√≠gito buscado
        if ultimo_digito == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

